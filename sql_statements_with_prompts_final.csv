Prompt,Type,SQL
"Create a table for storing users and include all the necessary fields such as user ID, first name, last name, email, password hash, phone number, etc.",DDL,"CREATE TABLE Users (user_id INT PRIMARY KEY AUTO_INCREMENT, first_name VARCHAR(100) NOT NULL, last_name VARCHAR(100) NOT NULL, email VARCHAR(150) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, phone_number VARCHAR(15), date_joined DATETIME DEFAULT CURRENT_TIMESTAMP, is_active BOOLEAN DEFAULT TRUE);"
"Define a table for categories, including a category ID and name, as well as a description.",DDL,"CREATE TABLE Categories (category_id INT PRIMARY KEY AUTO_INCREMENT, category_name VARCHAR(100) NOT NULL, description TEXT);"
"Define a table for storing products, with details like product name, description, price, stock quantity, and category ID.",DDL,"CREATE TABLE Products (product_id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(255) NOT NULL, description TEXT, price DECIMAL(10, 2) NOT NULL, stock_quantity INT NOT NULL, category_id INT, FOREIGN KEY (category_id) REFERENCES Categories(category_id));"
"Create a table for orders, which links users to the orders they've placed.",DDL,"CREATE TABLE Orders (order_id INT PRIMARY KEY AUTO_INCREMENT, user_id INT, order_date DATETIME DEFAULT CURRENT_TIMESTAMP, total_amount DECIMAL(10, 2), status VARCHAR(50) DEFAULT 'Pending', FOREIGN KEY (user_id) REFERENCES Users(user_id));"
"Create a table for the items in each order, linking products to the orders with the quantity and price.",DDL,"CREATE TABLE OrderItems (order_item_id INT PRIMARY KEY AUTO_INCREMENT, order_id INT, product_id INT, quantity INT NOT NULL, price DECIMAL(10, 2) NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));"
"Create a payments table that associates payments with orders, including details like the payment date, method, and status.",DDL,"CREATE TABLE Payments (payment_id INT PRIMARY KEY AUTO_INCREMENT, order_id INT, payment_date DATETIME DEFAULT CURRENT_TIMESTAMP, amount DECIMAL(10, 2), payment_method VARCHAR(50), payment_status VARCHAR(50), FOREIGN KEY (order_id) REFERENCES Orders(order_id));"
"Define a table for storing reviews given by users for products, with a rating and review text.",DDL,"CREATE TABLE Reviews (review_id INT PRIMARY KEY AUTO_INCREMENT, user_id INT, product_id INT, rating INT NOT NULL CHECK (rating >= 1 AND rating <= 5), review_text TEXT, review_date DATETIME DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));"
"Define a table for storing shipping details related to orders, including shipping address, method, and date.",DDL,"CREATE TABLE ShippingDetails (shipping_id INT PRIMARY KEY AUTO_INCREMENT, order_id INT, shipping_address TEXT NOT NULL, shipping_method VARCHAR(100), shipping_date DATETIME DEFAULT CURRENT_TIMESTAMP, estimated_delivery DATETIME, FOREIGN KEY (order_id) REFERENCES Orders(order_id));"
"Define a table for storing product images, associating each image with a product.",DDL,"CREATE TABLE ProductImages (image_id INT PRIMARY KEY AUTO_INCREMENT, product_id INT, image_url VARCHAR(255) NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id));"
Define a table for tags and another table to link products with multiple tags.,DDL,"CREATE TABLE Tags (tag_id INT PRIMARY KEY AUTO_INCREMENT, tag_name VARCHAR(100) NOT NULL);"
"Create a table to log changes to inventory, including the product ID, quantity change, and reason for change.",DDL,"CREATE TABLE ProductTags (product_tag_id INT PRIMARY KEY AUTO_INCREMENT, product_id INT, tag_id INT, FOREIGN KEY (product_id) REFERENCES Products(product_id), FOREIGN KEY (tag_id) REFERENCES Tags(tag_id));"
"Create a table for storing discount coupons with a unique code, discount percentage, and valid period.",DDL,"CREATE TABLE InventoryLogs (log_id INT PRIMARY KEY AUTO_INCREMENT, product_id INT, change_quantity INT, change_date DATETIME DEFAULT CURRENT_TIMESTAMP, reason VARCHAR(255), FOREIGN KEY (product_id) REFERENCES Products(product_id));"
"Define a table for tracking coupon usage, including which user used which coupon for which order.",DDL,"CREATE TABLE Coupons (coupon_id INT PRIMARY KEY AUTO_INCREMENT, code VARCHAR(50) NOT NULL UNIQUE, discount_percentage INT NOT NULL CHECK (discount_percentage > 0 AND discount_percentage <= 100), valid_from DATETIME, valid_until DATETIME);"
Insert a new user into the Users table.,DDL,"CREATE TABLE CouponUsage (usage_id INT PRIMARY KEY AUTO_INCREMENT, coupon_id INT, order_id INT, user_id INT, used_on DATETIME DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (coupon_id) REFERENCES Coupons(coupon_id), FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (user_id) REFERENCES Users(user_id));"
Insert a new category into the Categories table.,DML,"INSERT INTO Users (first_name, last_name, email, password_hash, phone_number) VALUES ('John', 'Doe', 'john.doe@example.com', 'hashedpassword123', '123-456-7890');"
Insert a new product into the Products table.,DML,"INSERT INTO Categories (category_name, description) VALUES ('Electronics', 'Devices and gadgets including phones, laptops, and accessories');"
Insert a new order into the Orders table.,DML,"INSERT INTO Products (name, description, price, stock_quantity, category_id) VALUES ('Smartphone', 'Latest 5G smartphone with high resolution camera', 799.99, 50, 1);"
Insert items into the OrderItems table.,DML,"INSERT INTO Orders (user_id, total_amount, status) VALUES (1, 799.99, 'Completed');"
Insert a new payment record into the Payments table.,DML,"INSERT INTO OrderItems (order_id, product_id, quantity, price) VALUES (1, 1, 1, 799.99);"
Insert a review for a product into the Reviews table.,DML,"INSERT INTO Payments (order_id, amount, payment_method, payment_status) VALUES (1, 799.99, 'Credit Card', 'Completed');"
Insert shipping details for an order into the ShippingDetails table.,DML,"INSERT INTO Reviews (user_id, product_id, rating, review_text) VALUES (1, 1, 5, 'Excellent phone with great features!');"
Insert a product image URL into the ProductImages table.,DML,"INSERT INTO ShippingDetails (order_id, shipping_address, shipping_method) VALUES (1, '123 Main St, City, Country', 'Standard Shipping');"
Insert tags into the Tags table.,DML,"INSERT INTO ProductImages (product_id, image_url) VALUES (1, 'http://example.com/image1.jpg');"
Link products to tags in the ProductTags table.,DML,"INSERT INTO Tags (tag_name) VALUES ('Smartphone'), ('Electronics'), ('5G');"
Insert an inventory log entry into the InventoryLogs table.,DML,"INSERT INTO ProductTags (product_id, tag_id) VALUES (1, 1), (1, 2), (1, 3);"
Insert a new coupon into the Coupons table.,DML,"INSERT INTO InventoryLogs (product_id, change_quantity, reason) VALUES (1, -5, 'Sold');"
Track coupon usage in the CouponUsage table.,DML,"INSERT INTO Coupons (code, discount_percentage, valid_from, valid_until) VALUES ('SUMMER2025', 15, '2025-06-01', '2025-08-31');"
Update the status of an order in the Orders table.,DML,"INSERT INTO CouponUsage (coupon_id, order_id, user_id) VALUES (1, 1, 1);"
Update the stock quantity of a product in the Products table.,DML,UPDATE Orders SET status = 'Shipped' WHERE order_id = 1;
Delete a product image from the ProductImages table.,DML,UPDATE Products SET stock_quantity = stock_quantity - 1 WHERE product_id = 1;
Delete a review from the Reviews table.,DML,DELETE FROM ProductImages WHERE image_id = 1;
Delete a coupon from the Coupons table.,DML,DELETE FROM Reviews WHERE review_id = 1;
Delete an order from the Orders table.,DML,DELETE FROM Coupons WHERE coupon_id = 1;
Select all products that are out of stock.,DML,DELETE FROM Orders WHERE order_id = 1;
Retrieve all reviews for a particular product.,DML,SELECT * FROM Products WHERE stock_quantity = 0;
Retrieve all users who have made a purchase over $500.,DML,SELECT * FROM Reviews WHERE product_id = 1;
Retrieve all orders along with the products in each order.,DML,SELECT DISTINCT Users.* FROM Users JOIN Orders ON Users.user_id = Orders.user_id WHERE Orders.total_amount > 500;
Get the total sales per product category.,DML,"SELECT Orders.order_id, Products.name, OrderItems.quantity FROM Orders JOIN OrderItems ON Orders.order_id = OrderItems.order_id JOIN Products ON OrderItems.product_id = Products.product_id;"
"Create a table to track shipping details for orders, including address and shipping method.",DML,"SELECT Categories.category_name, SUM(OrderItems.quantity * OrderItems.price) AS total_sales FROM OrderItems JOIN Products ON OrderItems.product_id = Products.product_id JOIN Categories ON Products.category_id = Categories.category_id GROUP BY Categories.category_name;"
